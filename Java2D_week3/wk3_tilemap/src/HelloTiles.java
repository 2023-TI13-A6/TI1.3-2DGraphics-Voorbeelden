import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.stage.Stage;
import org.jfree.fx.FXGraphics2D;
import sun.awt.image.BufferedImageDevice;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;

public class HelloTiles extends Application {
	Stage stage;
	@Override
	public void start(Stage primaryStage) throws Exception {
		stage = primaryStage;
		javafx.scene.canvas.Canvas canvas = new Canvas(1920, 1080);


		try {
			BufferedImage tileset = ImageIO.read(getClass().getResource("/images/tiles.png"));
			tiles = new BufferedImage[tileset.getWidth()/32 * tileset.getHeight()/32];
			int i = 0;
			for(int y = 0; y < tileset.getHeight(); y+=32)
			{
				for(int x = 0; x < tileset.getWidth(); x+=32)
				{
					tiles[i] = tileset.getSubimage(x,y,32,32);
					i++;
				}
			}


		} catch (IOException e) {
			e.printStackTrace();
		}



		FXGraphics2D g2d = new FXGraphics2D(canvas.getGraphicsContext2D());
		draw(g2d);
		primaryStage.setScene(new Scene(new Group(canvas)));
		primaryStage.setTitle("Hello Tilemap");
		primaryStage.show();

	}

	BufferedImage[] tiles;
	int[][] level = {{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5,  },
		{8, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{8, 9, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13,  },
		{8, 9, 10, -1, -1, 12, -1, 10, -1, -1, -1, 12, -1, 10, 12, -1, 10, -1, -1, -1, 12, -1, 10, -1, -1, 12, -1, 13, 8, -1, 10, -1, -1, 12, -1, 10, -1, -1, -1, 12, -1, 10, 12, -1, 10, -1, -1, -1, 12, -1, 10, -1, -1, 12, -1, 13,  },
		{8, 9, 36, 33, 33, 34, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 36, 33, 33, 34, -1, 13, 8, -1, 36, 33, 33, 34, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 36, 33, 33, 34, -1, 13,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{8, -1, 20, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 18, -1, 13,  },
		{8, -1, 36, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 34, -1, 13, 8, -1, 36, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 34, -1, 13,  },
		{8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13,  },
		{40, 41, 41, 41, 41, 23, -1, 10, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 12, -1, 22, 41, 41, 41, 41, 45, 40, 41, 41, 41, 41, 23, -1, 10, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 12, -1, 22, 41, 41, 41, 41, 45,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 6, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 7, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 6, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 7, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 22, 41, 41, 41, 41, 41, 41, 23, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 22, 41, 41, 41, 41, 41, 41, 23, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{0, 1, 1, 1, 1, 31, -1, 36, 34, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 36, 34, -1, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 31, -1, 36, 34, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 36, 34, -1, 30, 1, 1, 1, 1, 5,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{40, 41, 41, 41, 41, 23, -1, 20, 18, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 20, 18, -1, 22, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 23, -1, 20, 18, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 20, 18, -1, 22, 41, 41, 41, 41, 45,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 30, 1, 1, 1, 1, 1, 1, 31, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 30, 1, 1, 1, 1, 1, 1, 31, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{0, 1, 1, 1, 1, 31, -1, 36, 34, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 36, 34, -1, 30, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 31, -1, 36, 34, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 36, 34, -1, 30, 1, 1, 1, 1, 5,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{8, -1, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13,  },
		{8, -1, 36, 33, 7, 12, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 10, 6, 33, 34, -1, 13, 8, -1, 36, 33, 7, 12, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 10, 6, 33, 34, -1, 13,  },
		{8, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, 13, 8, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, 13,  },
		{40, 17, 18, -1, 10, 12, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 10, 12, -1, 20, 17, 45, 40, 17, 18, -1, 10, 12, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 10, 12, -1, 20, 17, 45,  },
		{0, 33, 34, -1, 36, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 34, -1, 36, 33, 5, 0, 33, 34, -1, 36, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 34, -1, 36, 33, 5,  },
		{8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13,  },
		{8, -1, 20, 17, 17, 17, 17, 15, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 14, 17, 17, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 17, 17, 15, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 14, 17, 17, 17, 17, 18, -1, 13,  },
		{8, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 13, 8, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 13,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 45, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 45,  }};



	public void draw(FXGraphics2D g2d)
	{
		g2d.setBackground(Color.black);
		g2d.clearRect(0,0,1920,1080);
		for(int y = 0; y < level.length; y++)
		{
			for(int x = 0; x < level[y].length; x++)
			{
				int tileIndex = level[y][x];
				if(tileIndex == -1)
					continue;
				AffineTransform tx = new AffineTransform();
				tx.translate(x*32,y*32);
				g2d.drawImage(tiles[tileIndex], tx, null);
			}
		}

	}
}
