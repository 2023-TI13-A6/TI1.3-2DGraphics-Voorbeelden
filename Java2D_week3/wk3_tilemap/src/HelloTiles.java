import sun.awt.image.BufferedImageDevice;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;

public class HelloTiles extends JPanel {
	public static void main(String[] args)
	{
		JFrame frame = new JFrame("Hello Java2D");
		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		frame.setMinimumSize(new Dimension(800, 600));
		frame.setExtendedState(frame.getExtendedState() | JFrame.MAXIMIZED_BOTH);
		frame.setContentPane(new HelloTiles());
		frame.setVisible(true);
	}

	BufferedImage[] tiles;
	int[][] level = {{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5,  },
		{8, 9, 9, 9, 9, 9, 9, 9, 9, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{8, 9, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13,  },
		{8, 9, 10, -1, -1, 12, -1, 10, -1, -1, -1, 12, -1, 10, 12, -1, 10, -1, -1, -1, 12, -1, 10, -1, -1, 12, -1, 13, 8, -1, 10, -1, -1, 12, -1, 10, -1, -1, -1, 12, -1, 10, 12, -1, 10, -1, -1, -1, 12, -1, 10, -1, -1, 12, -1, 13,  },
		{8, 9, 36, 33, 33, 34, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 36, 33, 33, 34, -1, 13, 8, -1, 36, 33, 33, 34, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 36, 33, 33, 34, -1, 13,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{8, -1, 20, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 20, 17, 17, 18, -1, 13,  },
		{8, -1, 36, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 34, -1, 13, 8, -1, 36, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 33, 33, 34, -1, 13,  },
		{8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13,  },
		{40, 41, 41, 41, 41, 23, -1, 10, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 12, -1, 22, 41, 41, 41, 41, 45, 40, 41, 41, 41, 41, 23, -1, 10, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 12, -1, 22, 41, 41, 41, 41, 45,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 6, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 7, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 6, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 7, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 22, 41, 41, 41, 41, 41, 41, 23, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 22, 41, 41, 41, 41, 41, 41, 23, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{0, 1, 1, 1, 1, 31, -1, 36, 34, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 36, 34, -1, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 31, -1, 36, 34, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 36, 34, -1, 30, 1, 1, 1, 1, 5,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{40, 41, 41, 41, 41, 23, -1, 20, 18, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 20, 18, -1, 22, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 23, -1, 20, 18, -1, 13, -1, -1, -1, -1, -1, -1, 8, -1, 20, 18, -1, 22, 41, 41, 41, 41, 45,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 30, 1, 1, 1, 1, 1, 1, 31, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 30, 1, 1, 1, 1, 1, 1, 31, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{-1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 10, 12, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, 10, 12, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 10, 12, -1, 13, -1, -1, -1, -1,  },
		{0, 1, 1, 1, 1, 31, -1, 36, 34, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 36, 34, -1, 30, 1, 1, 1, 1, 5, 0, 1, 1, 1, 1, 31, -1, 36, 34, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 36, 34, -1, 30, 1, 1, 1, 1, 5,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{8, -1, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 18, -1, 20, 17, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 17, 18, -1, 20, 17, 17, 18, -1, 13,  },
		{8, -1, 36, 33, 7, 12, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 10, 6, 33, 34, -1, 13, 8, -1, 36, 33, 7, 12, -1, 36, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 34, -1, 10, 6, 33, 34, -1, 13,  },
		{8, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, 13, 8, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, 13,  },
		{40, 17, 18, -1, 10, 12, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 10, 12, -1, 20, 17, 45, 40, 17, 18, -1, 10, 12, -1, 20, 18, -1, 20, 17, 17, 17, 17, 17, 17, 18, -1, 20, 18, -1, 10, 12, -1, 20, 17, 45,  },
		{0, 33, 34, -1, 36, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 34, -1, 36, 33, 5, 0, 33, 34, -1, 36, 34, -1, 10, 12, -1, 36, 33, 33, 7, 6, 33, 33, 34, -1, 10, 12, -1, 36, 34, -1, 36, 33, 5,  },
		{8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, 10, 12, -1, -1, -1, -1, -1, -1, 13,  },
		{8, -1, 20, 17, 17, 17, 17, 15, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 14, 17, 17, 17, 17, 18, -1, 13, 8, -1, 20, 17, 17, 17, 17, 15, 14, 17, 17, 18, -1, 10, 12, -1, 20, 17, 17, 15, 14, 17, 17, 17, 17, 18, -1, 13,  },
		{8, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 13, 8, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 36, 34, -1, 36, 33, 33, 33, 33, 33, 33, 33, 33, 34, -1, 13,  },
		{8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13,  },
		{40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 45, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 45,  }};

	HelloTiles()
	{
		setBackground(Color.black);
		try {
			BufferedImage tileset = ImageIO.read(getClass().getResource("/images/tiles.png"));
			tiles = new BufferedImage[tileset.getWidth()/32 * tileset.getHeight()/32];
			int i = 0;
			for(int y = 0; y < tileset.getHeight(); y+=32)
			{
				for(int x = 0; x < tileset.getWidth(); x+=32)
				{
					tiles[i] = tileset.getSubimage(x,y,32,32);
					i++;
				}
			}


		} catch (IOException e) {
			e.printStackTrace();
		}
	}


	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D)g;


		for(int y = 0; y < level.length; y++)
		{
			for(int x = 0; x < level[y].length; x++)
			{
				int tileIndex = level[y][x];
				if(tileIndex == -1)
					continue;
				AffineTransform tx = new AffineTransform();
				tx.translate(x*32,y*32);
				g2d.drawImage(tiles[tileIndex], tx, null);
			}
		}

	}
}
